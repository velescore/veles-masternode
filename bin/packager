#!/bin/bash
# Makes package from dev machine to files directory
#export ROOT_PREFIX=""  # could be "" for /, "/srv", "/var/local" ...
#export DIST_PREFIX="/root/veles-masternode/dist"
#LOG_FILE="./velesmn-install.log"

check_env() {
  if [ -z ${ROOT_PREFIX+x} ]; then echo 'You need to export ROOT_PREFIX variable first, "" is default'; exit 1; fi
  if [ -z ${DIST_PREFIX+x} ]; then echo 'You need to export DIST_PREFIX variable first, for example /root/veles-masternode/data/dist'; exit 1; fi
  if [ -z ${LOG_FILE+x} ]; then LOG_FILE="/tmp/velesmn-install.log"; fi
}

unparse_ports() {
        while read line; do
    port=$(echo $line | awk '{print $1}')
    service=$(echo $line | awk '{print $2}')

    if $(echo $line | grep -v '#' > /dev/null); then  # just ignore whole line if comment is present
      #echo -e "${port} => {{svc-port:${service}}}"
      find "${DIST_PREFIX}" -type f -iname "*.*" -exec sed -i "s/${port}/{{svc-port:${service}}}/" "{}" +;
    fi
        done < package/ports.cf
}

parse_ports() {
        while read line; do
    port=$(echo $line | awk '{print $1}')
    service=$(echo $line | awk '{print $2}')

    if $(echo $line | grep -v '#' > /dev/null); then  # just ignore whole line if comment is present
      #echo -e "{{svc-port:${service}}} => ${port}"
      find "${DIST_PREFIX}" -type f -iname "*.*" -exec sed -i "s/{{svc-port:${service}}}/${port}/" "{}" +;
    fi
        done < package/ports.cf
}

unparse_users() {
        while read line; do
                user=$(echo $line | awk '{print $1}')
                service=$(echo $line | awk '{print $2}')

                if $(echo $line | grep -v '#' > /dev/null) && [ "${line}" != "" ]; then        # just ignore whole line if comment is present
      #echo "${user} => {{svc-user:${service}}}"
                        find "${DIST_PREFIX}" -type f -iname "*.*" -exec sed -i "s/${user}/{{svc-user:${service}}}/" "{}" +;
                fi
        done < package/users.cf
}

parse_users() {
        while read line; do
                user=$(echo $line | awk '{print $1}')
                service=$(echo $line | awk '{print $2}')

                if $(echo $line | grep -v '#' > /dev/null) && [ "${line}" != "" ]; then        # just ignore whole line if comment is present
      #echo "{{svc-user:${service}}} => ${user}"
                        find "${DIST_PREFIX}" -type f -iname "*.*" -exec sed -i "s/{{svc-user:${service}}}/${user}/" "{}" +;
                fi
        done < package/users.cf
}

install_users() {
        while read line; do
                user=$(echo $line | awk '{print $1}')
                service=$(echo $line | awk '{print $2}')

                if $(echo $line | grep -v '#' > /dev/null) && [ "${line}" != "" ]; then
      #echo "+ ${user}"
      useradd -d "${ROOT_PREFIX}var/lib/veles" -c "${service}" "${user}"
                fi
        done < package/users.cf
}

parse_vars() {
        while read line; do
    name=$(echo $line | awk '{print $1}')
    value=$(echo $line | awk '{print $2}')

    if $(echo $line | grep -v '#' > /dev/null); then  # just ignore whole line if comment is present
      #echo -e "{{${name}}} => ${value}"
      find "${DIST_PREFIX}" -type f -iname "*.*" -exec sed -i "s/{{${name}}}/${value}/" "{}" +;
    fi
        done < package/vars.cf

  # Parse other kind of vars
  parse_ports
  parse_users
}

unparse_vars() {
        while read line; do
    name=$(echo $line | awk '{print $1}')
    value=$(echo $line | awk '{print $2}')

    if $(echo $line | grep -v '#' > /dev/null); then  # just ignore whole line if comment is present
      #echo -e "${value} => {{${name}}}"
      find "${DIST_PREFIX}" -type f -iname "*.*" -exec sed -i "s/${value}/{{${name}}}/" "{}" +;
    fi
        done < package/vars.cf

  # Parse other kind of vars
  unparse_ports
  unparse_users
}

apply_privileges() {
        while read line; do
                file=$(echo $line | awk '{print $1}')
                mode=$(echo $line | awk '{print $2}')
                owner=$(echo $line | awk '{print $3}')

                if $(echo $line | grep -v '#' > /dev/null); then
      echo "[set permissions] ${file}: ${mode}"
      echo "[set owner] ${file}: ${owner}"
      chmod -R "${mode}" "${file}"
      chown -R "${owner}" "${file}"
                fi
      done < package/privileges.list
}

install_apt_deps() {
  installed=$(dpkg --get-selections | awk '{print $1}')
  to_install=""

  echo " * Checking installed apt dependencies ..."
        while read line; do
    if $(echo $line | grep '#' > /dev/null); then
      continue
    fi

    echo -n "   ${line} ... "

    if echo "${installed}" | grep "${line}" > /dev/null; then
      echo "yes"
    else
      to_install="${to_install} ${line}"
      echo "no"
    fi
        done < package/apt.dep

  if [ "${to_install}" == "" ]; then
    echo " * Nothing to install, all apt dependencies satisfied"
  else
    echo " * Installing following apt packages: ${to_install}"
    apt-get install --no-install-recommends -y ${to_install}
  fi
}

install_pip3_deps() {
  installed=$(pip3 list --format=columns | awk '{print $1}')
  to_install=""

  echo " * Checking installed python3 dependencies ..."
        while read line; do
    if $(echo $line | grep '#' > /dev/null); then
      continue
    fi

    echo -n "   ${line} ... "

    if echo "${installed}" | grep "${line}" > /dev/null; then
      echo "yes"
    else
      echo "no"
      echo " * Installing python3 package ${line}"
      pip3 install "${line}"
    fi
        done < package/pip3.dep
}

install_git_deps() {
  echo " * Checking dependencies that need to be installed from source ..."
        while read line; do
    if $(echo $line | grep '#' > /dev/null); then
      continue
    fi

    repo=$(echo $line | awk '{print $1}')
    install_cmd=$(echo $line | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}')
    pwd=$(pwd)
    mkdir /tmp/veles.package > /dev/null
    rm -r /tmp/veles.package/*
    cd /tmp/veles.package
    git clone "${repo}"
    cd $(basename "${repo}")
    bash -c "${install_cmd}"
    cd "$pwd"

        done < package/git.dep
}

install_deps() {
  install_apt_deps
  install_pip3_deps
  install_git_deps
}

pre_install() {
  source package/pre_install.sh
  do_pre_install
}

post_install() {
  # Now 'dist' dir is the same as new ROOT_DIR here
  export DIST_PREFIX="${ROOT_PREFIX}"

  # Start post-install scripts
  source package/post_install.sh
  do_post_install
}

setup_service() {
  systemctl enable veles-mn
}

stop_service() {
  systemctl stop veles-mn
}

launch_service() {
  systemctl stop veles-mn 2> /dev/null
  systemctl daemon-reload
  systemctl start veles-mn
}

mn_backup() {
  git rm -r "${DIST_PREFIX}"
  mkdir "${DIST_PREFIX}"
  copy_package "${ROOT_PREFIX}" "${DIST_PREFIX}" "backup"
  unparse_vars
}

mn_restore() {
  PWD=$( pwd )
  cd ${DATA_DIR}
  source "package/config_dialog.sh"

  echo "Starting Veles Masternode installation" > $LOG_FILE
  date >> $LOG_FILE
  pre_config_wizard "package/vars.cf" || exit 0
  wiz_info_tiny "Installing dependencies ..."
  install_deps >> $LOG_FILE 2>&1
  wiz_info_tiny "Installing latest Veles Core ..."
  install_daemon "${CORE_RELEASE_URL}" "${CORE_RELEASE_DIR}" >> $LOG_FILE 2>&1
  wiz_info_tiny "Preparing instalaltion files ..."
  parse_vars >> $LOG_FILE 2>&1
  wiz_info_tiny "Creating user accounts ..."
  install_users >> $LOG_FILE 2>&1
  stop_service 2> /dev/null
  cleanup_system >> $LOG_FILE 2>&1
  wiz_info_tiny "Preparing installation files ..."
  pre_install >> $LOG_FILE 2>&1 # | wiz progress
  wiz_info_tiny "Copying system files ..."
  copy_package "${DIST_PREFIX}" "${ROOT_PREFIX}" "restore" >> $LOG_FILE 2>&1 #| wiz_progress
  wiz_info "Generating new certificates ..."
  post_install  #| wiz progress
  wiz_info_tiny "Copying application files ..."
  copy_app "${PACKAGE_DIR}" >> $LOG_FILE 2>&1
  post_config_wizard || exit 0
  wiz_info_tiny "Setting up file privileges ..."
  apply_privileges | wiz_progress
  wiz_info_tiny "Setting up systemd service ..."
  setup_service >> $LOG_FILE 2>&1
  wiz_info_tiny "Launching systemd service ..."
  launch_service >> $LOG_FILE 2>&1
  first_run_wizard || exit 0

  cd ${PWD}
}

install_daemon() {
  temp_dir='/tmp/veles-core'
  release_url="${1}"
  core_dir="${2}"  
  tar_file=$( basename "${release_url}" )

  pwd=$( pwd )
  mkdir -p $temp_dir 2> /dev/null
  cd $temp_dir
  wget "${release_url}"
  tar xvf "${tar_file}"
  cp -av "${core_dir}/velesd" /usr/bin/velesd
  cp -av "${core_dir}/veles-cli" /usr/bin/veles-cli
  cp -av "${core_dir}/veles-tx" /usr/bin/veles-tx
  chmod 755 /usr/bin/velesd
  chmod 755 /usr/bin/veles-cli 
  chmod 755 /usr/bin/veles-tx 
  rm -r "${tar_file}"
  rm -r "${core_dir}"
  cd "$pwd"
  rm -r "${temp_dir}"
}

cleanup_system() {
  # It's safer and easier to maintain very specific list what to delete,
  # than recovering from the damage if anything would go wrong.
  while read path; do
    # Just some extra safety precautions
    if [[ $path != '' ]] && [[ $path != '.' ]] && [[ $path != '..' ]]; then
      rm -rf "$path"
    fi
  done < package/cleanup.list  
}

copy_package() {
  src_prefix="${1}"
  dst_prefix="${2}"
  mode="${3}"

  while read path; do
    if [ -d "${src_prefix}${path}" ]; then
      mkdir -p "${dst_prefix}${path}" 2> /dev/null
      cp -av "${src_prefix}${path}/" $(dirname "${dst_prefix}${path}/")
    else
      mkdir -p $(dirname "${dst_prefix}${path}") > /dev/null
      cp -av "${src_prefix}${path}" $(dirname "${dst_prefix}${path}")
    fi
  done < package/package.list

  while read path; do
  # if we're creating new package, remove what needs to be excluded
  # we need to do this because we use recursive cp copy. And speed
  # for a development script that takes about a second is no issue
    if [[ "${3}" == "backup" ]]; then
      rm -r "${dst_prefix}${path}" 2> /dev/null
    fi
  done < package/exclude.list

  while read path; do
    if [ "${path}" == "" ] || [ "${path}" == "/" ] || [ "${path}" == "." ]; then
      continue
    fi
    mkdir -p "${dst_prefix}${path}" 2> /dev/null

  done < package/empty-dirs.list
}

copy_app() {
  package_dir="${1}"
  app_dir="/usr/lib/veles/masternode"
  libexec_dir="/usr/libexec/veles"

  # Remove old copy if exists
  if [ -d "${app_dir}" ]; then
    rm -rf "${app_dir}"
  fi
  mkdir -p "${app_dir}"
  cp -av ${package_dir}/application/* ${app_dir}/   
  cp -av ${package_dir}/bin/run-job ${libexec_dir}/
}

show_help() {
  echo "Veles Masternode environment packager and installator"
  echo -e "Usage: packager [action]\n\nActions:"
  echo -e "install\t\t\tinstalls Veles MN system package to local system"
  echo -e "\nDebugging actions:\nparse_vars\t\\treplace template variables to real values in package"
  echo -e "unparse_vars\t\treplace real values to template variables in package"
  echo -e "install_users\t\tadds neccessary user accounts"
  echo -e "apply_privileges\tapplies needed file/directory permissions and ownership"
}

if [ "$#" -ne 1 ] || [ "$1" == "--help" ]; then
  show_help
  exit 0
fi

# Need env vras set for everything except printing help
check_env

if [ "$1" == "install" ]; then
  mn_restore

elif [ "$1" == "make_install" ]; then
  mn_backup

elif [ "$1" == "parse_ports" ]; then
  parse_ports

elif [ "$1" == "unparse_ports" ]; then
  unparse_ports

elif [ "$1" == "parse_vars" ]; then
  parse_vars

elif [ "$1" == "unparse_vars" ]; then
  unparse_vars

elif [ "$1" == "install_users" ]; then
  install_users

elif [ "$1" == "apply_privileges" ]; then
  apply_privileges

elif [ "$1" == "pre_install" ]; then
  post_install

elif [ "$1" == "post_install" ]; then
  post_install

elif [ "$1" == "install_deps" ]; then
  install_deps

else
  show_help
fi
